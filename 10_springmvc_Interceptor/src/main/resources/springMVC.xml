<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 扫描组件 -->
    <context:component-scan base-package="com.atguigu.mvc"/>

    <!-- 配置Thymeleaf视图解析器 -->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
                        <!-- 视图前缀 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>
                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <!-- 处理静态资源，例如html、js、css、jpg
        若只设置该标签，则只能访问静态资源，其他请求则无法访问
        此时必须设置<mvc:annotation-driven/>解决问题
    -->
    <mvc:default-servlet-handler/>

    <!-- 开启mvc注解驱动 -->
    <mvc:annotation-driven>
        <mvc:message-converters>
            <!-- 处理响应中文内容乱码 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="defaultCharset" value="UTF-8"/>
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html</value>
                        <value>application/json</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- 视图控制器view-controller，需配合<mvc:annotation-driven />，否则请求映射将全部失效
            path：设置处理的请求地址
            view-name：设置请求地址所对应的视图名称
    -->
    <mvc:view-controller path="/" view-name="index"></mvc:view-controller>

    <!-- 必须通过文件解析器的解析才能将文件转换为MultipartFile对象 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"></bean>

    <!-- 拦截器配置：Controller Interceptor -->
    <mvc:interceptors>
        <!-- 写法1、以下两种bean或ref配置方式都是对DispatcherServlet所处理的所有请求进行拦截
            Option 1、使用关键字bean
            Option 2、使用关键字ref：ref表示引用IoC容器中的某一个bean，需要把FirstInterceptor加上@Component容器托管才能被ref引用bean，作用和上面写法一样
            -->
<!--        <bean class="com.atguigu.mvc.interceptors.FirstInterceptor"></bean>-->
<!--        <ref bean="firstInterceptor"></ref>-->

        <!-- 写法2、自定义拦截请求规则
            通过ref或bean标签设置拦截器，
            通过mvc:mapping设置需要拦截的请求，
            通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求
            -->
<!--        <mvc:interceptor>-->
<!--            <mvc:mapping path="/*"/> &lt;!&ndash; "/*"表示拦截一层URL路径，二层以上不拦截； "/**"表示拦截所有层级URL &ndash;&gt;-->
<!--            <mvc:exclude-mapping path="/"/> &lt;!&ndash; 排除"/"index页面，使其不在拦截范围 &ndash;&gt;-->
<!--            &lt;!&ndash; 拦截器配置使用上面提到的bean或ref写法 &ndash;&gt;-->
<!--            <ref bean="firstInterceptor"></ref>-->
<!--        </mvc:interceptor>-->

        <!-- 结合源码调试：
            多个拦截器结合源码调试，全局开启所有请求拦截形式
            -->
        <ref bean="firstInterceptor"></ref>
        <ref bean="secondInterceptor"></ref>
    </mvc:interceptors>

</beans>